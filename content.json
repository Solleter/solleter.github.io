{"meta":{"title":"F社","subtitle":"还没想好子标题","description":"日常记录","author":"F君","url":"http://f.mayopy.com","root":"/"},"pages":[{"title":"关于我","date":"2019-05-15T10:17:04.000Z","updated":"2019-08-04T00:15:10.406Z","comments":true,"path":"about/index.html","permalink":"http://f.mayopy.com/about/index.html","excerpt":"","text":"我一直在尝试了解自己… Email: Solleter@outlook.comGithub: https://github.com/Solleter 未来会怎样，我也不知道 :)"},{"title":"categories","date":"2019-06-04T04:22:40.000Z","updated":"2019-06-26T09:49:46.365Z","comments":true,"path":"categories/index.html","permalink":"http://f.mayopy.com/categories/index.html","excerpt":"","text":""},{"title":"next","date":"2019-07-23T04:24:30.000Z","updated":"2019-08-04T00:15:10.406Z","comments":true,"path":"next/index.html","permalink":"http://f.mayopy.com/next/index.html","excerpt":"","text":"2019.07.21 23:15我的一个小目标，30岁之前成为自由职业者，让自己的时间相对自由。回上海生活和工作，在上海买一个小公寓，不要孩子。 未来目标 量化交易 游戏开发 项目计划 虚拟货币量化交易系统 僵尸在上海游戏开发 2019年宏观学习目标 万门大学量化交易课程 万门大学高等数学课程 万门大学线性代数课程 万门大学大数据复杂系统和人工智能课程 Udacity或其他数据分析课程 Unity Shader 入门精要 格林通话英文原版阅读 Rust入门，达到能够写东西的程度"},{"title":"tags","date":"2019-06-04T04:22:28.000Z","updated":"2019-06-26T09:49:46.367Z","comments":true,"path":"tags/index.html","permalink":"http://f.mayopy.com/tags/index.html","excerpt":"","text":""},{"title":"weekly schedule","date":"2019-07-23T04:51:10.000Z","updated":"2019-08-04T00:15:10.407Z","comments":true,"path":"weekly/index.html","permalink":"http://f.mayopy.com/weekly/index.html","excerpt":"","text":"2019 年第 31 周 (07.29 ~ 08.04) 格林童话 1. Snow White and Rose Red 读完，单词总结完 玩一下HomeBridge 继续构思ZombieInShangHai 考虑一下匿名社区 2019 年第 30 周 (07.22~07.28) rust-by-example 结束 ZombieInShangHai 试验2D平面建筑构建 格林童话 1. Snow White and Rose Red 读完，单词总结完 ZombieInShangHai设计 上周计划的事情完成情况真令人糟心……，周末的时候去参加了一个技术活动，抽奖拿到了一件T恤"}],"posts":[{"title":"音乐游戏开发之从 midi 文件中提取重音点","slug":"音乐游戏开发之从-midi-文件中提取重音点","date":"2019-08-04T13:45:48.000Z","updated":"2019-08-04T13:49:47.788Z","comments":true,"path":"2019/08/04/音乐游戏开发之从-midi-文件中提取重音点/","link":"","permalink":"http://f.mayopy.com/2019/08/04/音乐游戏开发之从-midi-文件中提取重音点/","excerpt":"","text":"在开发音乐游戏的过程中，经常需要进行谱子的创作，如果人工手打，很容易造成不准和效率低下的情况。而通过音频人员做的midi文件中提取指定的信号，然后自动生成谱子，将大大提高效率和准确度。 本篇文章将解释使用 Python 从 midi 文件中提取指定信号，然后生成谱子的逻辑。 1. 与 midi 文件相关的东西midi 文件中有一个信号的概念，例如 note_on , note_off，为了做谱子，我们为不同的信号赋予不同的数值，然后以此来生成不同的谱子。 2. 使用 midi 文件生成谱子的逻辑以 QQ 炫舞为例，游戏中有多种点，例如点击的，滑动的，需要按住的，等等。这里我们用 midi 中的note_on事件做逻辑。首先，一首歌在不同的地方有重音，音频人员只要在对应的时间点上的 note_on事件设定我们约定好的值，例如这里用10作为点击的点，11作为滑动的点，12作为长按的点。拿到作好的 midi 文件后，我们只需要扫描整个 midi 文件中的 note_on事件，然后取出里面的时间点，和对应的值，就可以生成一个可以在游戏中用的谱子。一个谱子是什么样子的，完全由音频人员与策划去决定，程序这边只需要生成就可以。 3. 使用 Python 解析 midi 文件数据 这里要用的几个 Python 库，所以需要先安装，运行下面的命令安装 mido。（这里假设开发人员对 Python 有基本的了解）pip3 install mido 12345678910111213141516171819202122232425262728293031323334353637383940414243444546import midofrom mido import MidiFileimport osmidi_file_path = './test.mid'bpm = 121 # BPM 是必须的，这一个音频人员知道是什么tap_value = 10 # 定义点击的值wipe_value = 11 # 定义滑动的值hold_value = 12 # 定义按住的值# 这一个是为了适应人的听感，而加的偏移值，midi 文件的时间是准的# 但是人耳朵听起来可能不是很准，最终是以人耳听起来准为目标# 这个值不固定，根据自己游戏的音乐类型不同，以及做音频的人的听感不同，而设定，可以是正的，可以是负的time_offset = 0.25 def get_base_notes_data(_midi_file_path, _bpm): mid = MidiFile(_midi_file_path) tempo = mido.bpm2tempo(_bpm) _note_list = [] for i, track in enumerate(mid.tracks): print('Track &#123;&#125;: &#123;&#125;'.format(i, track.name)) passed_time = 0 for msg in track: ab_time = mido.tick2second(msg.time, mid.ticks_per_beat, tempo) real_time = ab_time + passed_time passed_time += ab_time # print(msg, \" passed time=\" + str(ab_time), \" read time=\" + str(round(real_time, 3))) if msg.type == \"note_on\": note_value = msg.note if note_value == tap_value: note_name = \"tap\" elif note_value == wipe_value: note_name = \"wipe\" elif note_value == hold_value: note_name = \"hold\" else: note_name = \"\" if note_name != \"\": note_data = &#123;\"note_name\": note_name, \"time\": round(real_time + time_offset, 3)&#125; _note_list.append(note_data) print(note_data) return _note_listget_base_notes_data(midi_file_path, bpm) 运行代码 python3 xxx.py （xxx 是你保存的 python 文件的名字） 这段代码只实现了最核心的 midi 数据提取，具体的自动化逻辑需要使用者自己写，例如当前有100个 midi 文件，不可能手动一个一个生成。","categories":[],"tags":[{"name":"游戏开发","slug":"游戏开发","permalink":"http://f.mayopy.com/tags/游戏开发/"},{"name":"Python","slug":"Python","permalink":"http://f.mayopy.com/tags/Python/"}]},{"title":"Unity3D 使用贝塞尔曲线控制物体抛物线移动","slug":"Unity3D-使用贝塞尔曲线控制物体抛物线移动","date":"2019-07-22T15:44:23.000Z","updated":"2019-08-04T00:15:10.405Z","comments":true,"path":"2019/07/22/Unity3D-使用贝塞尔曲线控制物体抛物线移动/","link":"","permalink":"http://f.mayopy.com/2019/07/22/Unity3D-使用贝塞尔曲线控制物体抛物线移动/","excerpt":"通俗来说贝塞尔曲线在游戏开发中，经常会用到抛物线，例如导弹抛物线飞行，用贝塞尔曲线很容易实现。通俗来讲，贝塞尔曲线就是通过三个点，产生一条曲线，通过一个变量 t，可以取到曲线上的某一个点的位置，这里的 t 取值是从0.0~1.0之间。例如 t取0.5，就是取曲线相对来说中间的位置点。我觉得这里的 0.0~1.0可以当作一个百分比来用。","text":"通俗来说贝塞尔曲线在游戏开发中，经常会用到抛物线，例如导弹抛物线飞行，用贝塞尔曲线很容易实现。通俗来讲，贝塞尔曲线就是通过三个点，产生一条曲线，通过一个变量 t，可以取到曲线上的某一个点的位置，这里的 t 取值是从0.0~1.0之间。例如 t取0.5，就是取曲线相对来说中间的位置点。我觉得这里的 0.0~1.0可以当作一个百分比来用。 曲线函数1234567891011121314151617/// &lt;summary&gt;/// 返回曲线在某一时间t上的点/// &lt;/summary&gt;/// &lt;param name=\"_point0\"&gt;起始点&lt;/param&gt;/// &lt;param name=\"_point1\"&gt;中间点&lt;/param&gt;/// &lt;param name=\"_point2\"&gt;终止点&lt;/param&gt;/// &lt;param name=\"t\"&gt;当前时间t(0.0~1.0)&lt;/param&gt;/// &lt;returns&gt;&lt;/returns&gt;public static Vector3 GetCurvePoint(Vector3 _point0, Vector3 _point1, Vector3 _point2, float t)&#123; t = Mathf.Clamp(t, 0.0f, 1.0f); float x = ((1 - t) * (1 - t)) * _point0.x + 2 * t * (1 - t) * _point1.x + t * t * _point2.x; float y = ((1 - t) * (1 - t)) * _point0.y + 2 * t * (1 - t) * _point1.y + t * t * _point2.y; float z = ((1 - t) * (1 - t)) * _point0.z + 2 * t * (1 - t) * _point1.z + t * t * _point2.z; Vector3 pos = new Vector3(x, y, z); return pos;&#125; 例如一个炮弹从A点要打到B点，在A和B的上方使用一个点作为中间点，就可以拉出一条曲线来，然后通过时间增量t，在Update中不断取这条曲线上的点，赋予炮弹，就可以让炮弹按抛物线飞行。 一个大概的应用12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849using UnityEngine;using System.Collections;public class CurveTest : MonoBehaviour&#123; public Transform fromPoint; // 起始点 public Transform middlePoint; // 中间点 public Transform endPoint; // 终止点 public Transform moveObj; // 要移动的物体 private float ticker = 0.0f; private float attackTime = 2.0f; // 假设要用2秒飞到目标点 /// &lt;summary&gt; /// 返回曲线在某一时间t上的点 /// &lt;/summary&gt; /// &lt;param name=\"_p0\"&gt;起始点&lt;/param&gt; /// &lt;param name=\"_p1\"&gt;中间点&lt;/param&gt; /// &lt;param name=\"_p2\"&gt;终止点&lt;/param&gt; /// &lt;param name=\"t\"&gt;当前时间t(0.0~1.0)&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static Vector3 GetCurvePoint(Vector3 _p0, Vector3 _p1, Vector3 _p2, float t) &#123; t = Mathf.Clamp(t, 0.0f, 1.0f); float x = ((1 - t) * (1 - t)) * _p0.x + 2 * t * (1 - t) * _p1.x + t * t * _p2.x; float y = ((1 - t) * (1 - t)) * _p0.y + 2 * t * (1 - t) * _p1.y + t * t * _p2.y; float z = ((1 - t) * (1 - t)) * _p0.z + 2 * t * (1 - t) * _p1.z + t * t * _p2.z; Vector3 pos = new Vector3(x, y, z); return pos; &#125; private void Update() &#123; ticker += Time.deltaTime; float t = ticker / attackTime; // 这里是计算当前已用时间占计划用时间的百分比，当作增量t t = Mathf.Clamp(t, 0.0f, 1.0f); Vector3 p1 = fromPoint.position; Vector3 p2 = middlePoint.position; Vector3 p3 = endPoint.position; Vector3 currPos = GetCurvePoint(p1, p2, p3, timeValue); moveObj.position = currPos; if(t == 1.0f) &#123; // 到达目标点 &#125; &#125;&#125; 维基百科上对于贝塞尔曲线的解释 图片来自维基百科","categories":[{"name":"Unity3D","slug":"Unity3D","permalink":"http://f.mayopy.com/categories/Unity3D/"}],"tags":[{"name":"游戏开发","slug":"游戏开发","permalink":"http://f.mayopy.com/tags/游戏开发/"},{"name":"Unity3D","slug":"Unity3D","permalink":"http://f.mayopy.com/tags/Unity3D/"},{"name":"数学","slug":"数学","permalink":"http://f.mayopy.com/tags/数学/"}]},{"title":"Unity3D UGUI 全局屏幕点击特效方案","slug":"Unity3D-UGUI-全局屏幕点击特效方案","date":"2019-07-21T06:15:00.000Z","updated":"2019-07-21T07:50:17.884Z","comments":true,"path":"2019/07/21/Unity3D-UGUI-全局屏幕点击特效方案/","link":"","permalink":"http://f.mayopy.com/2019/07/21/Unity3D-UGUI-全局屏幕点击特效方案/","excerpt":"","text":"在游戏开发中，经常会用到全局的屏幕点击特效，就是玩家在点击屏幕的时候，在屏幕最上层，播放一个特效，这个教程使用UGUI来实现，UI使用独立的相机渲染。 先看效果图 示例工程 -&gt; Github 示例工具中用到的特效资源来自于 Unity 的 AssetStore 免费资源 JMO Assets 在实现之前，首先要准备好的东西 准备好一个要使用的粒子特效 将特效 Prefab 的 Layer 全部设置成UI 将特效Prefab中所有的 Particle System 组件上 Renderer 属性中的 SortingLayer 设置为UI，如果没有这一层，则先添加 然后将 Renderer 属性中的 Order in Layer 设置为100 ，确保比所有的UI层级高 创建UI结构 UIRoot (一个空物体，用作UI的Root) UICamera (用于渲染UI的相机) Canvas (用于显示UI元素) FXContainer (空物体，用作屏幕特效的父物体) 编写播放逻辑 下面是UI结构各层的设置 UI层级结构中的那个Background忽略就好，就是随便加的一个 Image 作为背景 UIRoot UICamera Canvas FXContainer 下面是挂在 FXContainer 上的脚本123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111using System.Collections;using System.Collections.Generic;using UnityEngine;public class ScreenTapFX : MonoBehaviour&#123; /// &lt;summary&gt; /// 屏幕特效原始资源 /// &lt;/summary&gt; public GameObject fxSample; /// &lt;summary&gt; /// 屏幕特效的生命时长，超过后会进行缓存 /// &lt;/summary&gt; public float fxLifeTime = 1.0f; /// &lt;summary&gt; /// 屏幕特效的容器（父对象） /// &lt;/summary&gt; public RectTransform fxContainer; /// &lt;summary&gt; /// 屏幕特效渲染使用的相机 /// &lt;/summary&gt; public Camera fxRenderCamera; private Queue&lt;GameObject&gt; pool = new Queue&lt;GameObject&gt;(20); private List&lt;GameObject&gt; activatedFXList = new List&lt;GameObject&gt;(); private void Awake() &#123; if(fxSample == null) &#123; Debug.LogErrorFormat(\"没有找到屏幕特效\"); this.enabled = false; &#125; else &#123; fxSample.SetActive(false); &#125; &#125; private void Update() &#123; for (int i = activatedFXList.Count - 1; i &gt;= 0; --i) &#123; GameObject fx = activatedFXList[i]; float fxTime = float.Parse(fx.name); if(Time.time - fxTime &gt; fxLifeTime) &#123; RecycleFX(fx); activatedFXList.RemoveAt(i); &#125; &#125; if (Application.isMobilePlatform) &#123; for(int i = 0; i &lt; Input.touchCount; ++i) &#123; Touch touch = Input.GetTouch(i); if(touch.phase == TouchPhase.Began) &#123; PlayFX(touch.position); &#125; &#125; &#125; else &#123; if (Input.GetMouseButtonDown(0)) &#123; PlayFX(Input.mousePosition); &#125; &#125; &#125; private void PlayFX(Vector2 tapPos) &#123; GameObject fx = CreateFX(); fx.name = Time.time.ToString(); activatedFXList.Add(fx); RectTransform fxRectTrans = fx.GetComponent&lt;RectTransform&gt;(); Vector2 fxLocalPos; RectTransformUtility.ScreenPointToLocalPointInRectangle(fxContainer, tapPos, fxRenderCamera, out fxLocalPos); fxRectTrans.SetParent(fxContainer); fxRectTrans.anchoredPosition3D = fxLocalPos; fx.SetActive(true); &#125; private GameObject CreateFX() &#123; GameObject newFX = null; if(pool.Count &gt; 0) &#123; newFX = pool.Dequeue(); &#125; else &#123; newFX = Instantiate(fxSample); &#125; return newFX; &#125; private void RecycleFX(GameObject fx) &#123; fx.SetActive(false); pool.Enqueue(fx); &#125;&#125;","categories":[{"name":"Unity3D","slug":"Unity3D","permalink":"http://f.mayopy.com/categories/Unity3D/"}],"tags":[{"name":"游戏开发","slug":"游戏开发","permalink":"http://f.mayopy.com/tags/游戏开发/"},{"name":"Unity3D","slug":"Unity3D","permalink":"http://f.mayopy.com/tags/Unity3D/"},{"name":"UGUI","slug":"UGUI","permalink":"http://f.mayopy.com/tags/UGUI/"}]},{"title":"测试代码高亮","slug":"测试代码高亮","date":"2019-06-26T07:24:49.000Z","updated":"2019-07-21T07:55:06.533Z","comments":true,"path":"2019/06/26/测试代码高亮/","link":"","permalink":"http://f.mayopy.com/2019/06/26/测试代码高亮/","excerpt":"","text":"$$资本收益率=\\frac{资本产生的收入-费用}{所用资本} * 100\\%$$ 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677LuckyBagWidget = &#123; R_Day_Text = nil; R_ItemIcon_Image = nil; R_Lock = nil; R_Had = nil; R_Ready = nil; R_Ready_Button = nil; R_Number_Text = nil; R_Offseter = nil; R_Info_Button = nil; index = nil;&#125;function LuckyBagWidget:new(widget) local myself = &#123;&#125; setmetatable(myself, self); self.__index = self; myself.R_Day_Text = widget:GetUIWidget(CS.EComponent.Text, 'R_Day_Text'); myself.R_ItemIcon_Image = widget:GetUIWidget(CS.EComponent.Image, 'R_ItemIcon_Image'); myself.R_Lock = widget:GetUIWidget('R_Lock'); myself.R_Had = widget:GetUIWidget('R_Had'); myself.R_Ready = widget:GetUIWidget('R_Ready'); myself.R_Info_Button = widget:GetUIWidget(CS.EComponent.Button, 'R_Info_Button'); myself.R_Info_Button.onClick:AddListener(OnClickInfo); myself.R_Ready_Button = widget:GetUIWidget(CS.EComponent.Button, 'R_Ready_Button'); myself.R_Number_Text = widget:GetUIWidget(CS.EComponent.Text, 'R_Number_Text'); myself.R_Offseter = widget:GetUIWidget(CS.EComponent.RectTransform,'R_Offseter'); myself.R_Lock:SetActive(false); myself.R_Had:SetActive(false); myself.R_Ready:SetActive(false); myself.R_Ready_Button.onClick:AddListener( function () myself:OnClickGet(); end ); return myself; endfunction LuckyBagWidget:SetValue(index) self.index = index; self.R_Day_Text.text = tostring(index + 1); self.R_Number_Text.text = string.format('No.000%d', index + 1); self.R_Offseter.anchoredPosition3D = CS.UnityEngine.Vector3(-index * 15, 0, 0); local sprite = CS.PaintingLuckyBagModel.GetIcon(self.index + 1); self.R_ItemIcon_Image:SetImageSprite(sprite);endfunction LuckyBagWidget:RefreshStatus() self.R_Lock:SetActive(false); self.R_Had:SetActive(false); self.R_Ready:SetActive(false); local status = CS.PaintingLuckyBagModel.GetLuckyBagStatus(self.index); if status == 0 then -- not open self.R_Lock:SetActive(true); elseif status == 1 then -- open self.R_Ready:SetActive(true); elseif status == 2 then -- get self.R_Had:SetActive(true); endendfunction LuckyBagWidget:OnClickInfo()endfunction LuckyBagWidget:OnClickGet() CS.PaintingLuckyBagModel.ToGetLuckyBag(self.index);end-- function LuckyBagWidget:OnEvent(event_id, event_param)-- if event_id == CS.EventID.EID_RefreshLuckyBagStatus then-- self:RefreshStatus();-- end-- endreturn LuckyBagWidget; 1234from app.service import websocketif __name__ == \"__main__\": websocket.start() 123456789101112131415161718192021222324252627282930313233pub fn execute() &#123; iter(); find();&#125;fn iter() &#123; let vec1 = vec![1, 2, 3]; let vec2 = vec![4, 5, 6]; println!(\"2 in vec1: &#123;&#125;\", vec1.iter().any(|&amp;x| x == 2)); println!(\"2 in vec2:&#123;&#125;\", vec2.into_iter().any(|x| x == 2)); let array1 = [1, 2, 3]; let array2 = [4, 5, 6]; println!(\"2 in array1: &#123;&#125;\", array1.iter().any(|&amp;x| x == 2)); println!(\"2 in array2: &#123;&#125;\", array2.iter().any(|&amp;x| x == 2));&#125;fn find() &#123; let vec1 = vec![1, 2, 3]; let vec2 = vec![4, 5, 6]; let mut iter = vec1.iter(); let mut into_iter = vec2.into_iter(); println!(\"Find 2 in vec1: &#123;:?&#125;\", iter.find(|&amp;&amp;x| x == 2)); println!(\"Find 2 in vec2: &#123;:?&#125;\", into_iter.find(|&amp;x| x == 2)); let array1 = [1, 2, 3]; let array2 = [4, 5, 6]; println!(\"Find 2 in array1: &#123;:?&#125;\", array1.iter().find(|&amp;&amp;x| x == 2)); println!(\"Find 2 in array2: &#123;:?&#125;\", array2.into_iter().find(|&amp;&amp;x| x == 2));&#125;","categories":[],"tags":[]},{"title":"图解经济学-06-关于生产、利润、成本","slug":"图解经济学-06-关于生产、利润、成本","date":"2019-06-23T04:23:26.000Z","updated":"2019-06-29T06:22:56.493Z","comments":true,"path":"2019/06/23/图解经济学-06-关于生产、利润、成本/","link":"","permalink":"http://f.mayopy.com/2019/06/23/图解经济学-06-关于生产、利润、成本/","excerpt":"总成本 固定成本/沉没成本 就算企业生产量为零，也必须支付的固定费用。例如，厂房租金，设备，债务，员工薪水等","text":"总成本 固定成本/沉没成本 就算企业生产量为零，也必须支付的固定费用。例如，厂房租金，设备，债务，员工薪水等 可变成本 随着产出出水变化而变化的开支，例如原材料，工资，燃料等 边际成本 由于多生产一单位产出而增加的成本。例如生产100张年画为100元，那么生产101张年画的总成本为100.3元，那么0.3元就是生产第101张年画的边际成本。 平均成本 总成本除以产品的单位总数 平均固定成本 不变的总固定成本除以不断增加的产量。随着时间的推移，平均固定成本越来越小，以至无穷小。 平均可变成本 长期成本 长期中生产一定量产品所需要的成本 短期成本 短期内生产一定量产品所需要的成本 显性成本和隐性成本可以由货币来支付的成本，称为显性成本，而那些不要求用货币来支付的机会成本，称为隐性成本。 经济利润经济学家计算利润的方法，是用企业的总收益减去生产所销售物品与劳务耗去的所有机会成本(同时包括显性和隐性成本) 会计利润会计师在计算企业的经济利润时，只用企业的总收益减去其显性成本。 边际产量投入增加一单位时所得到的产量的增加 值得注意的是，随着工人数量的增加，工人的边际产量在逐渐降低 边际收益递减规律在增加一种投入而保持其他条件不变时，所增加投入的边际产量至少自某点开始会逐渐下降 规模报酬在现实生活中，大部分企业在长期生产时，往往会在很多方而同时增加投入，这种产出对于很多方面增加的投入的反应，经济学家使用规模报酬这个概念来描述 规模报酬不变 产出随着所有投入的增加而同比例增加。例如在农业上，如果土地、劳动、资本等投入同时增加一倍，那么如果 规模报酬不变的话，得到的产出应该也是原来的一倍。 规模报酬递增 产出随着所有的投入增加以更大比例增加。最典型的例子是输油管。直径扩大一倍时，输油量增加超过一倍 规模报酬递减 产出随着所有投入的均衡增加而较少比例增加。 产生规模效应的原因 专业化水平高 生产要素的组合 管理成本增加 企业分类 (按照企业所有者的身份来划分) 个人业主制 合伙制 公司制 (股份制) 有限责任制 公司制企业所有者承担有限责任，即当公司亏损时，他所承担的额度不会超出期最初的投资。 非公司制企业的所有者对企业亏损将承担无限责任，存在着为其他无力偿还债务的合伙人埋单的风险","categories":[{"name":"图解经济学","slug":"图解经济学","permalink":"http://f.mayopy.com/categories/图解经济学/"}],"tags":[{"name":"经济学","slug":"经济学","permalink":"http://f.mayopy.com/tags/经济学/"}]},{"title":"图解经济学-05-了解生产要素市场","slug":"图解经济学-05-了解生产要素市场","date":"2019-06-16T07:42:32.000Z","updated":"2019-07-21T07:55:06.532Z","comments":true,"path":"2019/06/16/图解经济学-05-了解生产要素市场/","link":"","permalink":"http://f.mayopy.com/2019/06/16/图解经济学-05-了解生产要素市场/","excerpt":"劳动、土地和资本这三种生产要素的供给与需求决定了工人、地主和资本家的价格","text":"劳动、土地和资本这三种生产要素的供给与需求决定了工人、地主和资本家的价格 生产要素可基本划分为土地市场、劳动力市场与资本市场。资本市场按照其存在的形态不同，可分为固定资本与金融资本 不同地区、不同行业的劳动者收入千差万别，差异最终是源于劳动力市场的存在。劳动者的技术水平越高，在劳动力市场中的估值越高 企业每新增一个工人，由于存在其他生产条件的限制，随着工人的数量的增加，新增工人的生产量是递减的。而企业在每个工人身上耗去的成本却不变，当新增工人的数量达到一定数值时，最后一名新增工人不仅不带来新的利润，甚至可能带来负利润 为什么企业会突然大量增员 产品的价格增加 技术创新 其他因素 有的工作为什么会有那么多人争 工作时间 劳动力参与程度 可供选择的机会 移民 根据技术你这是高低、职业特性等不同因素，劳动力市场可细分为更小的市场。每个市场中的劳动力供给量都受到了多种因素的影响。 如何理解人们的工资差异 补偿性工资，工资低点也没什么 劳动质量 胜者全得市场 行业的差异 一单位资本投入在一年中所获得的净收益叫做资本收益率 土地的特征 供给弹性为零 属于派生需求量 征税不影响该市场的供求 $$资本收益率=\\frac{资本产生的收入-费用}{所用资本} * 100\\%$$","categories":[{"name":"图解经济学","slug":"图解经济学","permalink":"http://f.mayopy.com/categories/图解经济学/"}],"tags":[{"name":"经济学","slug":"经济学","permalink":"http://f.mayopy.com/tags/经济学/"}]},{"title":"图解经济学-04-消费者选择理论","slug":"图解经济学-04-消费者选择理论","date":"2019-06-07T07:17:32.000Z","updated":"2019-06-29T06:15:22.965Z","comments":true,"path":"2019/06/07/图解经济学-04-消费者选择理论/","link":"","permalink":"http://f.mayopy.com/2019/06/07/图解经济学-04-消费者选择理论/","excerpt":"消费者会在不同的物品和劳务之间选择最适合自己偏好的排序，以使自己的效用最大化。","text":"消费者会在不同的物品和劳务之间选择最适合自己偏好的排序，以使自己的效用最大化。 边际效用是指多消费一单位物品或劳务时所带来的新增的或额外的效用人们口渴时吃西瓜，第一块清凉可口，后面味道就较差些，这正在经济学中著名的边际效用递减规律的佐证。随着对某种物品或劳务的消费增加，人们从中得到新增的或边际的效用量是在不断下降的。 当们人用同样的钱消费不同的物品时，不同的物品组合反映了人们的权衡取舍。但不管是怎样的消费组合，每1元钱带来的边际效用总是相同的。 非理性消费的根源 拒绝改变自己的观念 过分自信 依惯例行事 当一种物品价格下降时，人们会出现两种反映，从而使消费最优发生变化 有一种人会觉得自己有了变富的感觉，所以他什么都想多买一点 (收入效应) 另一种人则认为这种物品便宜了，所以他会减少对其他物品的购买，更多地购买这种物品 (替代效应) 大多数劳动者的收入效应大于替代效应","categories":[{"name":"图解经济学","slug":"图解经济学","permalink":"http://f.mayopy.com/categories/图解经济学/"}],"tags":[{"name":"经济学","slug":"经济学","permalink":"http://f.mayopy.com/tags/经济学/"}]},{"title":"图解经济学-03-供给与价格","slug":"图解经济学-03-供给与价格","date":"2019-06-07T05:43:31.000Z","updated":"2019-06-29T06:14:53.960Z","comments":true,"path":"2019/06/07/图解经济学-03-供给与价格/","link":"","permalink":"http://f.mayopy.com/2019/06/07/图解经济学-03-供给与价格/","excerpt":"需求价格弹性需求量对价格变动的敏感程度。一般来说，物品的需求价格弹性可以理解商品价格变动时，消费者得到或放弃这种物品的意愿有多大。","text":"需求价格弹性需求量对价格变动的敏感程度。一般来说，物品的需求价格弹性可以理解商品价格变动时，消费者得到或放弃这种物品的意愿有多大。 衣食住行，这些必须品，不管价格怎么变动，人们总归需要，所以需求弹性较小。 游艇，跑车，这些奢侈品，需求弹性比较大。越便宜，买的人越多，越贵，买的人越少。 影响需求弹性的因素 是否有替代品有替代品的商品，比较富有弹性，例如在一种商品价格升高时，人们可以放弃这种物品，转而选择它的替代品，例如猪肉和羊肉牛肉。 必须品还是奢侈品 市场大小市场大小很重要，关系到它们找到替代品的容易程度 时间因素以较长的时间来看，物品的需求弹性会增大。例如汽油的价格提高时，最初两三个月需求量减少得很少，但时间一长，人们会想出办法来减少对汽油的需求量。 供给价格弹性供给弹性，可以理解为一种商品价格变动时，市场上这种商品供给量的变化，也就是说，当价格变化时，生产商是要增加产量，还是减少产量。像海滩、土地缺乏供给价格弹性，因为几乎不能生产，而书籍，珠宝，数码相机等的供给价格弹性很大。 影响供给弹性的两个因素 行业中增加生产的困难程度例如服装行业，它的生产能力是很弹的，所以市场价格一有上升，其产量会立刻激增，很有弹性。例如历史文物，不管价格怎么变，增加量十分微小，导致供给缺乏弹性。 考察时间长短许多物品和劳务在价格提升后，短时间内数量不会有太大的变化，但时间一长，多少衣服会使用各种方法提高生产效率，并扩大生产，从而使产量有质的提升，这样长期来看，供给弹性就会比较大。例如20年前，电脑的生产量十分有限，但是现在，生产能力已经很大，所以供给弹性也增加了很多。 关于丰收悖论 农作物越增产，农民的收税越降低，这就是经济学上著名的丰收悖论 由于大部分农作物缺乏需求弹性。食物供给增加了，而人们的食物需求并没有太大的变化，所以农业整体收益下降了很多。","categories":[{"name":"图解经济学","slug":"图解经济学","permalink":"http://f.mayopy.com/categories/图解经济学/"}],"tags":[{"name":"经济学","slug":"经济学","permalink":"http://f.mayopy.com/tags/经济学/"}]},{"title":"图解经济学-02-商品市场","slug":"图解经济学-02-商品市场","date":"2019-06-03T00:13:47.000Z","updated":"2019-06-29T06:13:02.612Z","comments":true,"path":"2019/06/03/图解经济学-02-商品市场/","link":"","permalink":"http://f.mayopy.com/2019/06/03/图解经济学-02-商品市场/","excerpt":"每种物品都由生产这种物品机会成本较少的国家生产，所以，个人和企业用自己专业化生产的物品自愿地交换其他人的产品，能极大地增加消费品的范围和数量。","text":"每种物品都由生产这种物品机会成本较少的国家生产，所以，个人和企业用自己专业化生产的物品自愿地交换其他人的产品，能极大地增加消费品的范围和数量。 市场是买 方和卖方相互作业并共同决定物品和劳务的价格及交易 数量的机制。 市场要解决的三大基本问题 生产什么 如何生产 为谁生产 消费者的偏好和可供利用的科学技术是市场真正的君主 根据企业在市场中的数量比例和竞争程度分为四种 完全竞争市场 完全垄断市场 垄断竞争 寡头垄断市场 企业生产什么取决于消费的需求及其利润 市场竞争必然保全企业提高生产力，使社会生产力不断向前发展 市场的企业倾向于为自己产品评价（用货币体现）最高的一方生产。 完全竞争市场是经济学家眼中最理想的市场，买 者和卖者众多，所有人都是价格的接受者，没有进入或退出市场的门槛限制，买卖双方拥有充分的决策信息，其价格完全由供给和需求共同决定。 市场中起决定因素的是物品的价格 在其他条件相同时，一种物品价格上升会使该物品的需求量减少 市场需求量是所有个人对某种物品或劳务 需求的总和。因此，个人有需求曲线和市场需求曲线总会有些差异 物品或劳务的供给量是卖者愿意并且能够售出的数量。 在其他条件相同时，一种物品价格上升，该物品的供给量增加，价格下降时，供给量也减少 市场供给是量是所有卖者供应某种物品或劳务需求的总和 影响需求量的因素有： 收入 相关物品的八里桥 嗜好 预期 买者数量 其他因素 提高香烟价格并不会使人们使用毒品，所以香烟和毒品不是替代品 香烟引诱人们使用其他毒品，所以香烟和毒品是互补品 影响供给量的因素有 投入成本 技术 市场预期 卖者的数量 政府政策 其他因素 偶然因素也会影响市场中的供给量，例如天气 今年下雪，杀死了地里的害虫，增加了肥料，所以导致大米丰收，供给量增加，大米降价 空气污染加剧，呼吸道疾病增加，口罩的需求量增加，口罩价格上涨 在自由竞争的市场中，供给量，需求量和价格总是向着供需均衡的状态进发，当供给和需求有任何一个因素变动时，原有的均衡状态改变并向亲的均衡状态进发 例如，某场音乐会门票价格的均衡点在500元，高于或低于它的价格，会无法达到均衡点，价格太高，会导致供给过剩，价格太低，会导致供给短缺。而均衡点也随时可能出现变化，比如当音乐明星增加，演唱会增多时，市场就会随之自动调节，在更低的八里桥上形成新的均衡点。","categories":[{"name":"图解经济学","slug":"图解经济学","permalink":"http://f.mayopy.com/categories/图解经济学/"}],"tags":[{"name":"经济学","slug":"经济学","permalink":"http://f.mayopy.com/tags/经济学/"}]},{"title":"图解经济学-01-开始学习经济学","slug":"图解经济学-01-开始学习经济学","date":"2019-05-19T15:00:06.000Z","updated":"2019-06-29T06:13:35.752Z","comments":true,"path":"2019/05/19/图解经济学-01-开始学习经济学/","link":"","permalink":"http://f.mayopy.com/2019/05/19/图解经济学-01-开始学习经济学/","excerpt":"经济学研究的是一个社会如何利用稀缺资源以产生有价值的物品和劳务，并将它们在不同的人中间进行分配。经济学的精华之处就在于直面稀缺性的现实存在。","text":"经济学研究的是一个社会如何利用稀缺资源以产生有价值的物品和劳务，并将它们在不同的人中间进行分配。经济学的精华之处就在于直面稀缺性的现实存在。 我觉得了解现实中整个社会的经济运行原理，可以更好的去获取整个社会的资源。 人类生存和生活的欲望是无穷的，并且永远没有彻底满足的时候 国家的调息是为了抑制通货膨胀，使房价、粮价停止快速攀升，有利于提高居民的存款利息收入，但也难免引起股市、汇市等市场反应，对人们的投资行为产生影响。一般而言，银行上调利率，容易引起股市下跌。 机会成本，可以理解为，你做一件事情 A，但是为此要放弃另一件事情 B，事情 B 就可以说是 A 的机会成本。 和女朋友约会，和去图书馆，你选择了和女朋友约会，所以放弃了去图书馆，那么，去图书馆，就是你和女朋友约会的机会成本。 今晚你选择了加班，所以放弃了下班顺便买今天这一期的彩票，那买彩票这件事情，就是你加班的机会成本。或许，今天买的彩票能中1000万呢…(哈哈哈哈) 有一些明星运动员，一定要等到退役后，才去读大学，因为，放弃比赛，而去读大学这件事情，机会成本太大。 经济学家把这种为得到一种东西而放弃的东西，叫做机会成本 在经济学中，效用是指消费者在消费某种商品时所感受到的满足程度。一般来说，人对物品的欲望会随着欲望的不断满足而递减。如果欲望可以得到完全满足，欲望强度就会递减到零，甚至是负数。 当你很饿的时候，吃第一个馒头，效用最高，第二个，效用其次，第三个更次，第四个更次，第五个，吃撑，有负效用 贪污受贿的风险成本太低，贪污受贿行为就会受到激励。人的贪婪本性会暴露，使尽手段贪污受贿。 国家之间的贸易能拿所有国家一起变得更好，双赢或者多赢是完全有可能的。 A国家生产一顿小麦只需要5个小时，但是生产一辆汽车需要50小时。B国家生产一顿小麦需要50小时，但是生产一辆汽车只需要5小时，那这两个国家如果进行贸易，则会使双方各自获得更多的小麦和汽车，使双方都受益。 自由贸易给国家带来的好处 能实现国家之间的优势互补 加速一国经济增长 鲶鱼效应：促进国内市场竞争 有助于扩大市场 有助于学习先进经验和管理 有助于技术扩散 看不见的手 市场经济只能促进经济效率的提高，把经济这块蛋糕做大。至于经济分配的公平，仍然需要政府来维持。 市场中的自利于利他 市场为人们提供各种各样的产品，满足每一个人的具体需求，但其运转的动力却是每一个人的自利心理。 政府干预市场的原因有两大类：促进效率和促进平等 维护人们的产权 治理污染 打击垄断行为 奖励技术创新 文化与教育 生产率是一个整体经济运行的基础，将直接决定经济水平的高低。 短期菲利普斯显示出通货膨胀和失业之间的反向关系。也就是通货膨胀将短期增加就业。 央行增加纸币印刷 -&gt; 人们收入增加，消费能力提高，需求加大 -&gt; 刺激了供给方扩大生产 -&gt;从而增加了就业，降低了失业率。 决策者想通过选择较高的通货膨胀以减少失业，但他们减少失业的成功将是暂时的。无论通货膨胀率如何，失业最终要回到其自然率。","categories":[{"name":"图解经济学","slug":"图解经济学","permalink":"http://f.mayopy.com/categories/图解经济学/"}],"tags":[{"name":"经济学","slug":"经济学","permalink":"http://f.mayopy.com/tags/经济学/"}]}]}